5.1 把函数视作对象

示例5-1　创建并测试一个函数，然后读取它的__doc__ 属性，再检查它的类型
>>> def factorial(n): ➊
... '''returns n!'''
... return 1 if n < 2 else n * factorial(n-1)
...
>>> factorial(42)
1405006117752879898543142606244511569936384000000000
>>> factorial.__doc__ ➋
'returns n!'
>>> type(factorial) ➌
<class 'function'>

示例5-2　通过别的名称使用函数，再把函数作为参数传递
>>> fact = factorial
>>> fact
<function factorial at 0x...>
>>> fact(5)
120
>>> map(factorial, range(11))
<map object at 0x...>
>>> list(map(fact, range(11)))
[1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]

5.2　高阶函数

示例5-3　根据单词长度给一个列表排序
>>> fruits = ['strawberry', 'fig', 'apple', 'cherry', 'raspberry', 'banana']
>>> sorted(fruits, key=len)
['fig', 'apple', 'cherry', 'banana', 'raspberry', 'strawberry']

示例5-4　根据反向拼写给一个单词列表排序
>>> def reverse(word):
... return word[::-1]
>>> reverse('testing')
'gnitset'
>>> sorted(fruits, key=reverse)
['banana', 'apple', 'fig', 'raspberry', 'strawberry', 'cherry']

示例5-5　计算阶乘列表：map 和filter 与列表推导比较
>>> list(map(fact, range(6))) ➊
[1, 1, 2, 6, 24, 120]
>>> [fact(n) for n in range(6)] ➋
[1, 1, 2, 6, 24, 120]
>>> list(map(factorial, filter(lambda n: n % 2, range(6)))) ➌
[1, 6, 120]
>>> [factorial(n) for n in range(6) if n % 2] ➍
[1, 6, 120]
>>>
➊ 构建0! 到5! 的一个阶乘列表。
➋ 使用列表推导执行相同的操作。
➌ 使用map 和filter 计算直到5! 的奇数阶乘列表。
➍ 使用列表推导做相同的工作，换掉map 和filter，并避免了使用lambda 表达式。


示例5-6　使用reduce 和sum 计算0~99 之和
>>> from functools import reduce ➊
>>> from operator import add ➋
>>> reduce(add, range(100)) ➌
4950
>>> sum(range(100)) ➍
4950
>>>
➊ 从Python 3.0 起，reduce 不再是内置函数了。
➋ 导入add，以免创建一个专求两数之和的函数。
➌ 计算0~99 之和。
➍ 使用sum 做相同的求和；无需导入或创建求和函数。

5.3 匿名函数

示例5-7　使用lambda 表达式反转拼写，然后依此给单词列表排序
>>> fruits = ['strawberry', 'fig', 'apple', 'cherry', 'raspberry', 'banana']
>>> sorted(fruits, key=lambda word: word[::-1])
['banana', 'apple', 'fig', 'raspberry', 'strawberry', 'cherry']
>>>

5.4　可调用对象

Python 中有各种各样可调用的类型，因此判断对象能否调用，最安全的方法
是使用内置的callable() 函数：
>>> abs, str, 13
(<built-in function abs>, <class 'str'>, 13)
>>> [callable(obj) for obj in (abs, str, 13)]
[True, True, False]

5.5　用户定义的可调用类型

示例5-8　bingocall.py：调用BingoCage 实例，从打乱的列表中取出一个元素
import random
class BingoCage:
	def __init__(self, items):
		self._items = list(items) ➊
		random.shuffle(self._items) ➋
	def pick(self): ➌
		try:
			return self._items.pop()
		except IndexError:
			raise LookupError('pick from empty BingoCage') ➍
	def __call__(self): ➎
		return self.pick()

➊ __init__ 接受任何可迭代对象；在本地构建一个副本，防止列表参数的意外副作用。
➋ shuffle 定能完成工作，因为self._items 是列表。
➌ 起主要作用的方法。
➍ 如果self._items 为空，抛出异常，并设定错误消息。
➎ bingo.pick() 的快捷方式是bingo()。

下面是示例5-8 中定义的类的简单演示。注意，bingo 实例可以作为函数调用，而且内置
的callable(...) 函数判定它是可调用的对象：
>>> bingo = BingoCage(range(3))
>>> bingo.pick()
1
>>> bingo()
0
>>> callable(bingo)
True

5.6　函数内省

示例5-9　列出常规对象没有而函数有的属性
	>>> class C: pass # ➊
	>>> obj = C() # ➋
	>>> def func(): pass # ➌
	>>> sorted(set(dir(func)) - set(dir(obj))) # ➍
	['__annotations__', '__call__', '__closure__', '__code__', '__defaults__',
	'__get__', '__globals__', '__kwdefaults__', '__name__', '__qualname__']
	>>>
	
➊ 创建一个空的用户定义的类。
➋ 创建一个实例。
➌ 创建一个空函数。
➍ 计算差集，然后排序，得到类的实例没有而函数有的属性列表。

5.7　从定位参数到仅限关键字参数

示例5-10　 tag 函数用于生成HTML 标签；使用名为cls 的关键字参数传入“class”属
性，这是一种变通方法，因为“class”是Python 的关键字
def tag(name, *content, cls=None, **attrs):
	"""生成一个或多个HTML标签"""
	if cls is not None:
		attrs['class'] = cls
	if attrs:
		attr_str = ''.join(' %s="%s"' % (attr, value)
												for attr, value
												in sorted(attrs.items()))
	else:
		attr_str = ''
	if content:
		return '\n'.join('<%s%s>%s</%s>' %
											(name, attr_str, c, name) for c in content)
	else:
		return '<%s%s />' % (name, attr_str)

示例5-11　tag 函数（见示例5-10）众多调用方式中的几种
	>>> tag('br') ➊
	'<br />'
	>>> tag('p', 'hello') ➋
	'<p>hello</p>'
	>>> print(tag('p', 'hello', 'world'))
	<p>hello</p>
	<p>world</p>
	>>> tag('p', 'hello', id=33) ➌
	'<p id="33">hello</p>'
	>>> print(tag('p', 'hello', 'world', cls='sidebar')) ➍
	<p class="sidebar">hello</p>
	<p class="sidebar">world</p>
	>>> tag(content='testing', name="img") ➎
	'<img content="testing" />'
	>>> my_tag = {'name': 'img', 'title': 'Sunset Boulevard',
	... 'src': 'sunset.jpg', 'cls': 'framed'}
	>>> tag(**my_tag) ➏
	'<img class="framed" src="sunset.jpg" title="Sunset Boulevard" />'
➊ 传入单个定位参数，生成一个指定名称的空标签。
➋ 第一个参数后面的任意个参数会被*content 捕获，存入一个元组。
➌ tag 函数签名中没有明确指定名称的关键字参数会被**attrs 捕获，存入一个字典。
➍ cls 参数只能作为关键字参数传入。
➎ 调用tag 函数时，即便第一个定位参数也能作为关键字参数传入。
➏ 在my_tag 前面加上**，字典中的所有元素作为单个参数传入，同名键会绑定到对应的
具名参数上，余下的则被**attrs 捕获。


如果不想支持数量不定的定位参数，但是想支持仅限关键字参数，在签名中放一个*，如下所示：
>>> def f(a, *, b):
... return a, b
...
>>> f(1, b=2)
(1, 2)
注意，仅限关键字参数不一定要有默认值，可以像上例中b 那样，强制必须传入实参。

5.8　获取关于参数的信息

其他实例略过，主要是我现在用不上，

示例5-15　在指定长度附近截断字符串的函数
	def clip(text, max_len=80):
		"""在max_len前面或后面的第一个空格处截断文本
		"""
		end = None
		if len(text) > max_len:
			space_before = text.rfind(' ', 0, max_len)
			if space_before >= 0:
				end = space_before
		else:
			space_after = text.rfind(' ', max_len)
			if space_after >= 0:
				end = space_after
		if end is None: # 没找到空格
			end = len(text)
		return text[:end].rstrip()
		

